# Generated by Django 3.2.13 on 2022-06-10 23:54

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BatchDescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_header_id', models.PositiveIntegerField(db_index=True, unique=True, verbose_name='unique id of header row')),
                ('batch_set_id', models.PositiveIntegerField(db_index=True, null=True, verbose_name='unique id of batch set row')),
                ('batch_header_map_id', models.PositiveIntegerField(unique=True, verbose_name='unique id of header map')),
                ('google_civic_election_id', models.PositiveIntegerField(blank=True, db_index=True, default=0, null=True, verbose_name='google civic election id')),
                ('batch_name', models.CharField(max_length=255)),
                ('kind_of_batch', models.CharField(choices=[('MEASURE', 'Measure'), ('ELECTED_OFFICE', 'ElectedOffice'), ('CONTEST_OFFICE', 'ContestOffice'), ('CANDIDATE', 'Candidate'), ('IMPORT_BALLOT_ITEM', 'Ballot Returned'), ('IMPORT_POLLING_LOCATION', 'Map Point'), ('ORGANIZATION', 'Organization'), ('POSITION', 'Position'), ('POLITICIAN', 'Politician')], db_index=True, default='MEASURE', max_length=32)),
                ('organization_we_vote_id', models.CharField(blank=True, max_length=255, null=True, verbose_name="if for positions, the organization's we vote id")),
                ('polling_location_we_vote_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='if for ballot items, the map point we vote id')),
                ('voter_id', models.IntegerField(blank=True, null=True)),
                ('batch_description_text', models.CharField(max_length=255)),
                ('batch_description_analyzed', models.BooleanField(db_index=True, default=False)),
                ('source_uri', models.URLField(blank=True, max_length=255, null=True, verbose_name='uri where data is coming from')),
                ('date_created', models.DateTimeField(auto_now=True, null=True, verbose_name='date first saved')),
            ],
        ),
        migrations.CreateModel(
            name='BatchHeader',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_header_column_000', models.TextField(blank=True, null=True)),
                ('batch_header_column_001', models.TextField(blank=True, null=True)),
                ('batch_header_column_002', models.TextField(blank=True, null=True)),
                ('batch_header_column_003', models.TextField(blank=True, null=True)),
                ('batch_header_column_004', models.TextField(blank=True, null=True)),
                ('batch_header_column_005', models.TextField(blank=True, null=True)),
                ('batch_header_column_006', models.TextField(blank=True, null=True)),
                ('batch_header_column_007', models.TextField(blank=True, null=True)),
                ('batch_header_column_008', models.TextField(blank=True, null=True)),
                ('batch_header_column_009', models.TextField(blank=True, null=True)),
                ('batch_header_column_010', models.TextField(blank=True, null=True)),
                ('batch_header_column_011', models.TextField(blank=True, null=True)),
                ('batch_header_column_012', models.TextField(blank=True, null=True)),
                ('batch_header_column_013', models.TextField(blank=True, null=True)),
                ('batch_header_column_014', models.TextField(blank=True, null=True)),
                ('batch_header_column_015', models.TextField(blank=True, null=True)),
                ('batch_header_column_016', models.TextField(blank=True, null=True)),
                ('batch_header_column_017', models.TextField(blank=True, null=True)),
                ('batch_header_column_018', models.TextField(blank=True, null=True)),
                ('batch_header_column_019', models.TextField(blank=True, null=True)),
                ('batch_header_column_020', models.TextField(blank=True, null=True)),
                ('batch_header_column_021', models.TextField(blank=True, null=True)),
                ('batch_header_column_022', models.TextField(blank=True, null=True)),
                ('batch_header_column_023', models.TextField(blank=True, null=True)),
                ('batch_header_column_024', models.TextField(blank=True, null=True)),
                ('batch_header_column_025', models.TextField(blank=True, null=True)),
                ('batch_header_column_026', models.TextField(blank=True, null=True)),
                ('batch_header_column_027', models.TextField(blank=True, null=True)),
                ('batch_header_column_028', models.TextField(blank=True, null=True)),
                ('batch_header_column_029', models.TextField(blank=True, null=True)),
                ('batch_header_column_030', models.TextField(blank=True, null=True)),
                ('batch_header_column_031', models.TextField(blank=True, null=True)),
                ('batch_header_column_032', models.TextField(blank=True, null=True)),
                ('batch_header_column_033', models.TextField(blank=True, null=True)),
                ('batch_header_column_034', models.TextField(blank=True, null=True)),
                ('batch_header_column_035', models.TextField(blank=True, null=True)),
                ('batch_header_column_036', models.TextField(blank=True, null=True)),
                ('batch_header_column_037', models.TextField(blank=True, null=True)),
                ('batch_header_column_038', models.TextField(blank=True, null=True)),
                ('batch_header_column_039', models.TextField(blank=True, null=True)),
                ('batch_header_column_040', models.TextField(blank=True, null=True)),
                ('batch_header_column_041', models.TextField(blank=True, null=True)),
                ('batch_header_column_042', models.TextField(blank=True, null=True)),
                ('batch_header_column_043', models.TextField(blank=True, null=True)),
                ('batch_header_column_044', models.TextField(blank=True, null=True)),
                ('batch_header_column_045', models.TextField(blank=True, null=True)),
                ('batch_header_column_046', models.TextField(blank=True, null=True)),
                ('batch_header_column_047', models.TextField(blank=True, null=True)),
                ('batch_header_column_048', models.TextField(blank=True, null=True)),
                ('batch_header_column_049', models.TextField(blank=True, null=True)),
                ('batch_header_column_050', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BatchHeaderMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_header_id', models.PositiveIntegerField(db_index=True, unique=True, verbose_name='unique id of header row')),
                ('batch_header_map_000', models.TextField(blank=True, null=True)),
                ('batch_header_map_001', models.TextField(blank=True, null=True)),
                ('batch_header_map_002', models.TextField(blank=True, null=True)),
                ('batch_header_map_003', models.TextField(blank=True, null=True)),
                ('batch_header_map_004', models.TextField(blank=True, null=True)),
                ('batch_header_map_005', models.TextField(blank=True, null=True)),
                ('batch_header_map_006', models.TextField(blank=True, null=True)),
                ('batch_header_map_007', models.TextField(blank=True, null=True)),
                ('batch_header_map_008', models.TextField(blank=True, null=True)),
                ('batch_header_map_009', models.TextField(blank=True, null=True)),
                ('batch_header_map_010', models.TextField(blank=True, null=True)),
                ('batch_header_map_011', models.TextField(blank=True, null=True)),
                ('batch_header_map_012', models.TextField(blank=True, null=True)),
                ('batch_header_map_013', models.TextField(blank=True, null=True)),
                ('batch_header_map_014', models.TextField(blank=True, null=True)),
                ('batch_header_map_015', models.TextField(blank=True, null=True)),
                ('batch_header_map_016', models.TextField(blank=True, null=True)),
                ('batch_header_map_017', models.TextField(blank=True, null=True)),
                ('batch_header_map_018', models.TextField(blank=True, null=True)),
                ('batch_header_map_019', models.TextField(blank=True, null=True)),
                ('batch_header_map_020', models.TextField(blank=True, null=True)),
                ('batch_header_map_021', models.TextField(blank=True, null=True)),
                ('batch_header_map_022', models.TextField(blank=True, null=True)),
                ('batch_header_map_023', models.TextField(blank=True, null=True)),
                ('batch_header_map_024', models.TextField(blank=True, null=True)),
                ('batch_header_map_025', models.TextField(blank=True, null=True)),
                ('batch_header_map_026', models.TextField(blank=True, null=True)),
                ('batch_header_map_027', models.TextField(blank=True, null=True)),
                ('batch_header_map_028', models.TextField(blank=True, null=True)),
                ('batch_header_map_029', models.TextField(blank=True, null=True)),
                ('batch_header_map_030', models.TextField(blank=True, null=True)),
                ('batch_header_map_031', models.TextField(blank=True, null=True)),
                ('batch_header_map_032', models.TextField(blank=True, null=True)),
                ('batch_header_map_033', models.TextField(blank=True, null=True)),
                ('batch_header_map_034', models.TextField(blank=True, null=True)),
                ('batch_header_map_035', models.TextField(blank=True, null=True)),
                ('batch_header_map_036', models.TextField(blank=True, null=True)),
                ('batch_header_map_037', models.TextField(blank=True, null=True)),
                ('batch_header_map_038', models.TextField(blank=True, null=True)),
                ('batch_header_map_039', models.TextField(blank=True, null=True)),
                ('batch_header_map_040', models.TextField(blank=True, null=True)),
                ('batch_header_map_041', models.TextField(blank=True, null=True)),
                ('batch_header_map_042', models.TextField(blank=True, null=True)),
                ('batch_header_map_043', models.TextField(blank=True, null=True)),
                ('batch_header_map_044', models.TextField(blank=True, null=True)),
                ('batch_header_map_045', models.TextField(blank=True, null=True)),
                ('batch_header_map_046', models.TextField(blank=True, null=True)),
                ('batch_header_map_047', models.TextField(blank=True, null=True)),
                ('batch_header_map_048', models.TextField(blank=True, null=True)),
                ('batch_header_map_049', models.TextField(blank=True, null=True)),
                ('batch_header_map_050', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BatchHeaderTranslationSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind_of_batch', models.CharField(choices=[('MEASURE', 'Measure'), ('ELECTED_OFFICE', 'ElectedOffice'), ('CONTEST_OFFICE', 'ContestOffice'), ('CANDIDATE', 'Candidate'), ('IMPORT_BALLOT_ITEM', 'Ballot Returned'), ('IMPORT_POLLING_LOCATION', 'Map Point'), ('ORGANIZATION', 'Organization'), ('POSITION', 'Position'), ('POLITICIAN', 'Politician')], default='MEASURE', max_length=32)),
                ('header_value_recognized_by_we_vote', models.TextField(blank=True, null=True)),
                ('incoming_alternate_header_value', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BatchProcess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind_of_process', models.CharField(choices=[('ACTIVITY_NOTICE_PROCESS', 'Create, update, or schedule to send Activity Notices'), ('API_REFRESH_REQUEST', 'Make sure we have cached a recent return from a specific API'), ('AUGMENT_ANALYTICS_ACTION_WITH_ELECTION_ID', 'Add election id to AnalyticsAction'), ('AUGMENT_ANALYTICS_ACTION_WITH_FIRST_VISIT', 'Mark first AnalyticsAction per day'), ('CALCULATE_SITEWIDE_VOTER_METRICS', 'Sitewide voter metrics for all time'), ('CALCULATE_SITEWIDE_DAILY_METRICS', 'Sitewide daily metrics'), ('CALCULATE_SITEWIDE_ELECTION_METRICS', 'Sitewide election metrics'), ('CALCULATE_ORGANIZATION_DAILY_METRICS', 'Organization specific daily metrics'), ('CALCULATE_ORGANIZATION_ELECTION_METRICS', 'Organization specific election metrics'), ('RETRIEVE_BALLOT_ITEMS_FROM_POLLING_LOCATIONS', 'Retrieve Ballot Items from Map Points'), ('REFRESH_BALLOT_ITEMS_FROM_POLLING_LOCATIONS', 'Refresh Ballot Items from BallotReturned Map Points'), ('REFRESH_BALLOT_ITEMS_FROM_VOTERS', 'Refresh Ballot Items from Voter Custom Addresses'), ('SEARCH_TWITTER_FOR_CANDIDATE_TWITTER_HANDLE', 'Search for Candidate Twitter Handles')], default='RETRIEVE_BALLOT_ITEMS_FROM_POLLING_LOCATIONS', max_length=50)),
                ('google_civic_election_id', models.PositiveIntegerField(db_index=True, default=0, verbose_name='google civic election id')),
                ('state_code', models.CharField(max_length=2, null=True, verbose_name='state the ballot item is related to')),
                ('analytics_date_as_integer', models.PositiveIntegerField(blank=True, null=True)),
                ('voter_id', models.IntegerField(blank=True, null=True, verbose_name='the voter unique id')),
                ('polling_location_we_vote_id', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='we vote permanent id of the map point')),
                ('api_name', models.CharField(max_length=255, null=True)),
                ('election_id_list_serialized', models.CharField(max_length=255, null=True)),
                ('date_added_to_queue', models.DateTimeField(null=True, verbose_name='start')),
                ('date_started', models.DateTimeField(null=True, verbose_name='start')),
                ('date_completed', models.DateTimeField(null=True, verbose_name='finished')),
                ('date_checked_out', models.DateTimeField(null=True)),
                ('batch_process_paused', models.BooleanField(default=False)),
                ('completion_summary', models.TextField(blank=True, null=True)),
                ('use_ballotpedia', models.BooleanField(default=False)),
                ('use_ctcl', models.BooleanField(default=False)),
                ('use_vote_usa', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='BatchProcessAnalyticsChunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_process_id', models.PositiveIntegerField(db_index=True, default=0)),
                ('date_started', models.DateTimeField(default=None, null=True)),
                ('timed_out', models.BooleanField(default=None, null=True)),
                ('date_completed', models.DateTimeField(default=None, null=True)),
                ('number_of_rows_being_reviewed', models.PositiveIntegerField(default=0, null=True)),
                ('number_of_rows_successfully_reviewed', models.PositiveIntegerField(default=0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BatchProcessBallotItemChunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_process_id', models.PositiveIntegerField(db_index=True, default=0)),
                ('batch_set_id', models.PositiveIntegerField(db_index=True, default=0)),
                ('google_civic_election_id', models.PositiveIntegerField(db_index=True, default=0)),
                ('state_code', models.CharField(max_length=2, null=True)),
                ('retrieve_date_started', models.DateTimeField(null=True)),
                ('retrieve_date_completed', models.DateTimeField(null=True)),
                ('retrieve_timed_out', models.BooleanField(default=None, null=True)),
                ('retrieve_row_count', models.PositiveIntegerField(default=0)),
                ('analyze_date_started', models.DateTimeField(null=True)),
                ('analyze_date_completed', models.DateTimeField(null=True)),
                ('analyze_timed_out', models.BooleanField(default=None, null=True)),
                ('analyze_row_count', models.PositiveIntegerField(default=0)),
                ('create_date_started', models.DateTimeField(null=True)),
                ('create_date_completed', models.DateTimeField(null=True)),
                ('create_timed_out', models.BooleanField(default=None, null=True)),
                ('create_row_count', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='BatchProcessLogEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_process_id', models.PositiveIntegerField(db_index=True, default=0)),
                ('batch_process_ballot_item_chunk_id', models.PositiveIntegerField(db_index=True, default=0)),
                ('batch_set_id', models.PositiveIntegerField(db_index=True, default=0)),
                ('google_civic_election_id', models.PositiveIntegerField(default=0, verbose_name='google civic election id')),
                ('state_code', models.CharField(max_length=2, null=True, verbose_name='state the ballot item is related to')),
                ('voter_id', models.IntegerField(blank=True, null=True, verbose_name='the voter unique id')),
                ('polling_location_we_vote_id', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='we vote permanent id of the map point')),
                ('critical_failure', models.BooleanField(default=None, null=True)),
                ('date_added', models.DateTimeField(auto_now_add=True, null=True)),
                ('kind_of_process', models.CharField(default='', max_length=50)),
                ('analytics_date_as_integer', models.PositiveIntegerField(default=None, null=True)),
                ('status', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BatchRow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_header_id', models.PositiveIntegerField(db_index=True, verbose_name='unique id of header row')),
                ('google_civic_election_id', models.PositiveIntegerField(blank=True, db_index=True, default=0, null=True, verbose_name='election id')),
                ('polling_location_we_vote_id', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('voter_id', models.IntegerField(blank=True, null=True)),
                ('state_code', models.CharField(blank=True, db_index=True, max_length=2, null=True, verbose_name='state code for this data')),
                ('batch_row_analyzed', models.BooleanField(db_index=True, default=False)),
                ('batch_row_created', models.BooleanField(db_index=True, default=False)),
                ('batch_row_000', models.TextField(blank=True, null=True)),
                ('batch_row_001', models.TextField(blank=True, null=True)),
                ('batch_row_002', models.TextField(blank=True, null=True)),
                ('batch_row_003', models.TextField(blank=True, null=True)),
                ('batch_row_004', models.TextField(blank=True, null=True)),
                ('batch_row_005', models.TextField(blank=True, null=True)),
                ('batch_row_006', models.TextField(blank=True, null=True)),
                ('batch_row_007', models.TextField(blank=True, null=True)),
                ('batch_row_008', models.TextField(blank=True, null=True)),
                ('batch_row_009', models.TextField(blank=True, null=True)),
                ('batch_row_010', models.TextField(blank=True, null=True)),
                ('batch_row_011', models.TextField(blank=True, null=True)),
                ('batch_row_012', models.TextField(blank=True, null=True)),
                ('batch_row_013', models.TextField(blank=True, null=True)),
                ('batch_row_014', models.TextField(blank=True, null=True)),
                ('batch_row_015', models.TextField(blank=True, null=True)),
                ('batch_row_016', models.TextField(blank=True, null=True)),
                ('batch_row_017', models.TextField(blank=True, null=True)),
                ('batch_row_018', models.TextField(blank=True, null=True)),
                ('batch_row_019', models.TextField(blank=True, null=True)),
                ('batch_row_020', models.TextField(blank=True, null=True)),
                ('batch_row_021', models.TextField(blank=True, null=True)),
                ('batch_row_022', models.TextField(blank=True, null=True)),
                ('batch_row_023', models.TextField(blank=True, null=True)),
                ('batch_row_024', models.TextField(blank=True, null=True)),
                ('batch_row_025', models.TextField(blank=True, null=True)),
                ('batch_row_026', models.TextField(blank=True, null=True)),
                ('batch_row_027', models.TextField(blank=True, null=True)),
                ('batch_row_028', models.TextField(blank=True, null=True)),
                ('batch_row_029', models.TextField(blank=True, null=True)),
                ('batch_row_030', models.TextField(blank=True, null=True)),
                ('batch_row_031', models.TextField(blank=True, null=True)),
                ('batch_row_032', models.TextField(blank=True, null=True)),
                ('batch_row_033', models.TextField(blank=True, null=True)),
                ('batch_row_034', models.TextField(blank=True, null=True)),
                ('batch_row_035', models.TextField(blank=True, null=True)),
                ('batch_row_036', models.TextField(blank=True, null=True)),
                ('batch_row_037', models.TextField(blank=True, null=True)),
                ('batch_row_038', models.TextField(blank=True, null=True)),
                ('batch_row_039', models.TextField(blank=True, null=True)),
                ('batch_row_040', models.TextField(blank=True, null=True)),
                ('batch_row_041', models.TextField(blank=True, null=True)),
                ('batch_row_042', models.TextField(blank=True, null=True)),
                ('batch_row_043', models.TextField(blank=True, null=True)),
                ('batch_row_044', models.TextField(blank=True, null=True)),
                ('batch_row_045', models.TextField(blank=True, null=True)),
                ('batch_row_046', models.TextField(blank=True, null=True)),
                ('batch_row_047', models.TextField(blank=True, null=True)),
                ('batch_row_048', models.TextField(blank=True, null=True)),
                ('batch_row_049', models.TextField(blank=True, null=True)),
                ('batch_row_050', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BatchRowActionBallotItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_set_id', models.PositiveIntegerField(db_index=True, null=True, verbose_name='unique id of batch set')),
                ('batch_header_id', models.PositiveIntegerField(db_index=True, verbose_name='unique id of header row')),
                ('batch_row_id', models.PositiveIntegerField(db_index=True, default=None, null=True, verbose_name='unique id of batch row')),
                ('kind_of_action', models.CharField(choices=[('IMPORT_TO_BE_DETERMINED', 'To Be Determined'), ('DO_NOT_PROCESS', 'Do not process'), ('IMPORT_CREATE', 'Create'), ('IMPORT_ADD_TO_EXISTING', 'Add to Existing')], db_index=True, default='IMPORT_TO_BE_DETERMINED', max_length=40)),
                ('ballot_item_id', models.PositiveIntegerField(db_index=True, default=None, null=True, verbose_name='ballot item unique id')),
                ('voter_id', models.IntegerField(default=0, verbose_name='the voter unique id')),
                ('polling_location_we_vote_id', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='we vote permanent id of the map point')),
                ('google_civic_election_id', models.CharField(db_index=True, max_length=20, verbose_name='google civic election id')),
                ('google_civic_election_id_new', models.PositiveIntegerField(default=0, verbose_name='google civic election id')),
                ('state_code', models.CharField(max_length=2, null=True, verbose_name='state the ballot item is related to')),
                ('google_ballot_placement', models.BigIntegerField(blank=True, null=True, verbose_name='the order this item should appear on the ballot')),
                ('local_ballot_order', models.IntegerField(blank=True, null=True, verbose_name='locally calculated order this item should appear on the ballot')),
                ('contest_office_id', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='local id for this contest office')),
                ('contest_office_we_vote_id', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='we vote permanent id for this office')),
                ('contest_measure_id', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='contest_measure unique id')),
                ('contest_measure_we_vote_id', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='we vote permanent id for this measure')),
                ('ballot_item_display_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='a label we can sort by')),
                ('measure_subtitle', models.TextField(blank=True, default='', null=True, verbose_name='google civic referendum subtitle')),
                ('measure_text', models.TextField(blank=True, default='', null=True, verbose_name='measure text')),
                ('measure_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='url of measure')),
                ('yes_vote_description', models.TextField(blank=True, default=None, null=True, verbose_name='what a yes vote means')),
                ('no_vote_description', models.TextField(blank=True, default=None, null=True, verbose_name='what a no vote means')),
                ('status', models.TextField(blank=True, default='', null=True, verbose_name='batch row action ballot item status')),
            ],
        ),
        migrations.CreateModel(
            name='BatchRowActionCandidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_set_id', models.PositiveIntegerField(null=True, verbose_name='unique id of batch set')),
                ('batch_header_id', models.PositiveIntegerField(db_index=True, verbose_name='unique id of header row')),
                ('batch_row_id', models.PositiveIntegerField(db_index=True, verbose_name='unique id of batch row')),
                ('kind_of_action', models.CharField(choices=[('IMPORT_TO_BE_DETERMINED', 'To Be Determined'), ('DO_NOT_PROCESS', 'Do not process'), ('IMPORT_CREATE', 'Create'), ('IMPORT_ADD_TO_EXISTING', 'Add to Existing')], db_index=True, default='IMPORT_TO_BE_DETERMINED', max_length=40)),
                ('candidate_we_vote_id', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='we vote permanent id of this candidate')),
                ('maplight_id', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='maplight candidate id')),
                ('vote_smart_id', models.CharField(blank=True, default=None, max_length=15, null=True, verbose_name='vote smart candidate id')),
                ('vote_usa_office_id', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('vote_usa_politician_id', models.CharField(blank=True, default=None, max_length=64, null=True)),
                ('vote_usa_profile_image_url_https', models.TextField(blank=True, default=None, null=True)),
                ('contest_office_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='contest_office_id id')),
                ('contest_office_we_vote_id', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='we vote permanent id for the office this candidate is running for')),
                ('contest_office_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='name of the office')),
                ('politician_id', models.BigIntegerField(blank=True, null=True, verbose_name='politician unique identifier')),
                ('politician_we_vote_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='we vote politician id')),
                ('candidate_name', models.CharField(max_length=255, verbose_name='candidate name')),
                ('google_civic_candidate_name', models.CharField(max_length=255, verbose_name='candidate name exactly as received from google civic')),
                ('candidate_gender', models.CharField(blank=True, max_length=255, null=True, verbose_name='candidate gender')),
                ('birth_day_text', models.CharField(blank=True, max_length=10, null=True, verbose_name='birth day')),
                ('party', models.CharField(blank=True, max_length=255, null=True, verbose_name='party')),
                ('photo_url', models.CharField(blank=True, max_length=255, null=True, verbose_name='photoUrl')),
                ('photo_url_from_ctcl', models.TextField(blank=True, default=None, null=True)),
                ('photo_url_from_maplight', models.URLField(blank=True, max_length=255, null=True, verbose_name='candidate portrait url of candidate from maplight')),
                ('photo_url_from_vote_smart', models.URLField(blank=True, max_length=255, null=True, verbose_name='candidate portrait url of candidate from vote smart')),
                ('photo_url_from_vote_usa', models.TextField(blank=True, default=None, null=True)),
                ('order_on_ballot', models.CharField(blank=True, max_length=255, null=True, verbose_name='order on ballot')),
                ('google_civic_election_id', models.CharField(blank=True, db_index=True, max_length=255, null=True, verbose_name='google civic election id')),
                ('google_civic_election_id_new', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='google civic election id')),
                ('ocd_division_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='ocd division id')),
                ('state_code', models.CharField(blank=True, max_length=2, null=True, verbose_name='state this candidate serves')),
                ('candidate_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='website url of candidate')),
                ('candidate_contact_form_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='website url of candidate contact form')),
                ('facebook_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='facebook url of candidate')),
                ('twitter_url', models.URLField(blank=True, null=True, verbose_name='twitter url of candidate')),
                ('twitter_user_id', models.BigIntegerField(blank=True, null=True, verbose_name='twitter id')),
                ('candidate_twitter_handle', models.CharField(max_length=255, null=True, verbose_name='candidate twitter screen_name')),
                ('twitter_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='org name from twitter')),
                ('twitter_location', models.CharField(blank=True, max_length=255, null=True, verbose_name='org location from twitter')),
                ('twitter_followers_count', models.IntegerField(blank=True, default=0, verbose_name='number of twitter followers')),
                ('twitter_profile_image_url_https', models.URLField(blank=True, null=True, verbose_name='url of logo from twitter')),
                ('twitter_profile_background_image_url_https', models.URLField(blank=True, null=True, verbose_name='tile-able background from twitter')),
                ('twitter_profile_banner_url_https', models.URLField(blank=True, null=True, verbose_name='profile banner image from twitter')),
                ('twitter_description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Text description of this organization from twitter.')),
                ('google_plus_url', models.URLField(blank=True, null=True, verbose_name='google plus url of candidate')),
                ('youtube_url', models.URLField(blank=True, null=True, verbose_name='youtube url of candidate')),
                ('candidate_email', models.CharField(blank=True, max_length=255, null=True, verbose_name='candidate email')),
                ('candidate_phone', models.CharField(blank=True, max_length=255, null=True, verbose_name='candidate phone')),
                ('wikipedia_page_id', models.BigIntegerField(blank=True, null=True, verbose_name='pageid')),
                ('wikipedia_page_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Page title on Wikipedia')),
                ('wikipedia_photo_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='url of wikipedia logo')),
                ('ballotpedia_candidate_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='ballotpedia integer id')),
                ('ballotpedia_candidate_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='candidate name exactly as received from ballotpedia')),
                ('ballotpedia_candidate_summary', models.TextField(blank=True, default=None, null=True, verbose_name='candidate summary from ballotpedia')),
                ('ballotpedia_candidate_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='url of candidate on ballotpedia')),
                ('ballotpedia_election_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='ballotpedia election id')),
                ('ballotpedia_image_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='ballotpedia image id')),
                ('ballotpedia_office_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='ballotpedia elected office integer id')),
                ('ballotpedia_page_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Page title on Ballotpedia')),
                ('ballotpedia_person_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='ballotpedia person integer id')),
                ('ballotpedia_photo_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='url of ballotpedia logo')),
                ('ballotpedia_race_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='ballotpedia race integer id')),
                ('ballot_guide_official_statement', models.TextField(blank=True, default='', null=True, verbose_name='official candidate statement from ballot guide')),
                ('batch_row_action_office_ctcl_uuid', models.CharField(blank=True, max_length=36, null=True, verbose_name='ctcl uuid')),
                ('crowdpac_candidate_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='crowdpac integer id')),
                ('ctcl_uuid', models.CharField(blank=True, max_length=36, null=True, verbose_name='ctcl uuid')),
                ('candidate_is_top_ticket', models.BooleanField(default=False, verbose_name='candidate is top ticket')),
                ('candidate_is_incumbent', models.BooleanField(default=False, verbose_name='candidate is currently in the office')),
                ('candidate_participation_status', models.CharField(blank=True, max_length=255, null=True, verbose_name='candidate participation status')),
                ('candidate_ctcl_person_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='candidate person id')),
                ('status', models.TextField(blank=True, default='', null=True, verbose_name='batch row action candidate status')),
            ],
        ),
        migrations.CreateModel(
            name='BatchRowActionContestOffice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_set_id', models.PositiveIntegerField(null=True, verbose_name='unique id of batch set')),
                ('batch_header_id', models.PositiveIntegerField(db_index=True, verbose_name='unique id of header row')),
                ('batch_row_id', models.PositiveIntegerField(db_index=True, verbose_name='unique id of batch row')),
                ('kind_of_action', models.CharField(choices=[('IMPORT_TO_BE_DETERMINED', 'To Be Determined'), ('DO_NOT_PROCESS', 'Do not process'), ('IMPORT_CREATE', 'Create'), ('IMPORT_ADD_TO_EXISTING', 'Add to Existing')], db_index=True, default='IMPORT_TO_BE_DETERMINED', max_length=40)),
                ('contest_office_we_vote_id', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='we vote permanent id for this contest office')),
                ('contest_office_name', models.CharField(max_length=255, verbose_name='name of the contest office')),
                ('google_civic_office_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='office name exactly as received from google civic')),
                ('google_civic_election_id', models.CharField(db_index=True, max_length=255, verbose_name='google civic election id')),
                ('google_civic_election_id_new', models.PositiveIntegerField(default=0, verbose_name='google civic election id')),
                ('ocd_division_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='ocd division id')),
                ('maplight_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='maplight unique identifier')),
                ('ballotpedia_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='ballotpedia unique identifier')),
                ('ballotpedia_district_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='ballotpedia district id')),
                ('ballotpedia_election_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='ballotpedia election id')),
                ('ballotpedia_is_marquee', models.BooleanField(default=None, null=True)),
                ('is_ballotpedia_general_election', models.BooleanField(default=False)),
                ('is_ballotpedia_general_runoff_election', models.BooleanField(default=False)),
                ('is_ballotpedia_primary_election', models.BooleanField(default=False)),
                ('is_ballotpedia_primary_runoff_election', models.BooleanField(default=False)),
                ('ballotpedia_office_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='ballotpedia integer id')),
                ('ballotpedia_office_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='office name exactly as received from ballotpedia')),
                ('ballotpedia_office_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='url of office on ballotpedia')),
                ('ballotpedia_race_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='ballotpedia race integer id')),
                ('ballotpedia_race_office_level', models.CharField(blank=True, max_length=255, null=True, verbose_name='race office level')),
                ('wikipedia_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='wikipedia unique identifier')),
                ('number_voting_for', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic number of candidates to vote for')),
                ('number_elected', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic number of candidates who will be elected')),
                ('state_code', models.CharField(blank=True, max_length=2, null=True, verbose_name='state this office serves')),
                ('primary_party', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic primary party')),
                ('district_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='district name')),
                ('district_scope', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic district scope')),
                ('district_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic district id')),
                ('contest_level0', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic level, option 0')),
                ('contest_level1', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic level, option 1')),
                ('contest_level2', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic level, option 2')),
                ('electorate_specifications', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic primary party')),
                ('special', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic primary party')),
                ('ctcl_uuid', models.CharField(blank=True, max_length=36, null=True, verbose_name='ctcl uuid')),
                ('elected_office_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='name of the elected office')),
                ('candidate_selection_id1', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='temporary id of candidate selection 1')),
                ('candidate_selection_id2', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='temporary id of candidate selection 2')),
                ('candidate_selection_id3', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='temporary id of candidate selection 3')),
                ('candidate_selection_id4', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='temporary id of candidate selection 4')),
                ('candidate_selection_id5', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='temporary id of candidate selection 5')),
                ('candidate_selection_id6', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='temporary id of candidate selection 6')),
                ('candidate_selection_id7', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='temporary id of candidate selection 7')),
                ('candidate_selection_id8', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='temporary id of candidate selection 8')),
                ('candidate_selection_id9', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='temporary id of candidate selection 9')),
                ('candidate_selection_id10', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='temporary id of candidate selection 10')),
                ('vote_usa_office_id', models.CharField(blank=True, default=None, max_length=64, null=True, verbose_name='Vote USA permanent id for this candidate')),
                ('status', models.TextField(blank=True, default='', null=True, verbose_name='batch row action contest office status')),
            ],
        ),
        migrations.CreateModel(
            name='BatchRowActionElectedOffice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_set_id', models.PositiveIntegerField(null=True, verbose_name='unique id of batch set')),
                ('batch_header_id', models.PositiveIntegerField(db_index=True, verbose_name='unique id of header row')),
                ('batch_row_id', models.PositiveIntegerField(db_index=True, verbose_name='unique id of batch row')),
                ('kind_of_action', models.CharField(choices=[('IMPORT_TO_BE_DETERMINED', 'To Be Determined'), ('DO_NOT_PROCESS', 'Do not process'), ('IMPORT_CREATE', 'Create'), ('IMPORT_ADD_TO_EXISTING', 'Add to Existing')], db_index=True, default='IMPORT_TO_BE_DETERMINED', max_length=40)),
                ('elected_office_we_vote_id', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='we vote permanent id for this elected office')),
                ('elected_office_name', models.CharField(max_length=255, verbose_name='name of the elected office')),
                ('elected_office_name_es', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='name of the elected office in Spanish')),
                ('google_civic_office_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='office name exactly as received from google civic')),
                ('google_civic_election_id', models.CharField(db_index=True, max_length=255, verbose_name='google civic election id')),
                ('google_civic_election_id_new', models.PositiveIntegerField(default=0, verbose_name='google civic election id')),
                ('ocd_division_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='ocd division id')),
                ('maplight_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='maplight unique identifier')),
                ('ballotpedia_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='ballotpedia unique identifier')),
                ('wikipedia_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='wikipedia unique identifier')),
                ('number_elected', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic number of candidates who will be elected')),
                ('state_code', models.CharField(blank=True, max_length=2, null=True, verbose_name='state this office serves')),
                ('primary_party', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic primary party')),
                ('district_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='district name')),
                ('district_scope', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic district scope')),
                ('district_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic district id')),
                ('contest_level0', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic level, option 0')),
                ('contest_level1', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic level, option 1')),
                ('contest_level2', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic level, option 2')),
                ('electorate_specifications', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic primary party')),
                ('special', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic primary party')),
                ('ctcl_uuid', models.CharField(blank=True, max_length=36, null=True, verbose_name='ctcl uuid')),
                ('elected_office_description', models.CharField(blank=True, max_length=255, null=True, verbose_name='office description')),
                ('elected_office_description_es', models.CharField(blank=True, max_length=255, null=True, verbose_name='office description spanish')),
                ('elected_office_is_partisan', models.BooleanField(default=False, verbose_name='office is_partisan')),
                ('elected_office_ctcl_id', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='we vote permanent id for this elected office')),
                ('status', models.TextField(blank=True, default='', null=True, verbose_name='batch row action elected office status')),
            ],
        ),
        migrations.CreateModel(
            name='BatchRowActionMeasure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_set_id', models.PositiveIntegerField(null=True, verbose_name='unique id of batch set')),
                ('batch_header_id', models.PositiveIntegerField(db_index=True, verbose_name='unique id of header row')),
                ('batch_row_id', models.PositiveIntegerField(db_index=True, unique=True, verbose_name='unique id of batch row')),
                ('kind_of_action', models.CharField(choices=[('IMPORT_TO_BE_DETERMINED', 'To Be Determined'), ('DO_NOT_PROCESS', 'Do not process'), ('IMPORT_CREATE', 'Create'), ('IMPORT_ADD_TO_EXISTING', 'Add to Existing')], db_index=True, default='IMPORT_TO_BE_DETERMINED', max_length=40)),
                ('measure_we_vote_id', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='we vote permanent id')),
                ('maplight_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='maplight unique identifier')),
                ('vote_smart_id', models.CharField(blank=True, max_length=200, null=True, verbose_name='votesmart unique identifier')),
                ('measure_title', models.CharField(max_length=255, verbose_name='measure title')),
                ('google_civic_measure_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='measure name exactly as received from google civic')),
                ('measure_subtitle', models.TextField(blank=True, default='', null=True, verbose_name='google civic referendum subtitle')),
                ('measure_text', models.TextField(null=True, verbose_name='measure text')),
                ('measure_url', models.CharField(max_length=255, null=True, verbose_name='measure details url')),
                ('google_civic_election_id', models.PositiveIntegerField(db_index=True, default=0, verbose_name='google civic election id')),
                ('ocd_division_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='ocd division id')),
                ('primary_party', models.CharField(blank=True, max_length=255, null=True, verbose_name='primary party')),
                ('district_name', models.CharField(max_length=255, verbose_name='district name')),
                ('district_scope', models.CharField(max_length=255, verbose_name='district scope')),
                ('district_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='google civic district id')),
                ('state_code', models.CharField(blank=True, max_length=2, null=True, verbose_name='state this measure affects')),
                ('election_day_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='election day')),
                ('wikipedia_page_id', models.BigIntegerField(blank=True, null=True, verbose_name='pageid')),
                ('wikipedia_page_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Page title on Wikipedia')),
                ('wikipedia_photo_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='url of wikipedia logo')),
                ('ballotpedia_district_id', models.PositiveIntegerField(default=0, verbose_name='ballotpedia district id')),
                ('ballotpedia_election_id', models.PositiveIntegerField(default=0, verbose_name='ballotpedia election id')),
                ('ballotpedia_measure_id', models.PositiveIntegerField(default=0, verbose_name='ballotpedia measure id')),
                ('ballotpedia_measure_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='ballotpedia measure name')),
                ('ballotpedia_measure_status', models.CharField(blank=True, max_length=255, null=True, verbose_name='ballotpedia measure status')),
                ('ballotpedia_measure_summary', models.TextField(blank=True, default='', null=True, verbose_name='ballotpedia measure summary')),
                ('ballotpedia_measure_text', models.TextField(blank=True, default='', null=True, verbose_name='ballotpedia measure text')),
                ('ballotpedia_measure_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='ballotpedia url of measure')),
                ('ballotpedia_page_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Page title on Ballotpedia')),
                ('ballotpedia_photo_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='url of ballotpedia logo')),
                ('ballotpedia_yes_vote_description', models.TextField(blank=True, default=None, null=True, verbose_name='what a yes vote means')),
                ('ballotpedia_no_vote_description', models.TextField(blank=True, default=None, null=True, verbose_name='what a no vote means')),
                ('ctcl_uuid', models.CharField(blank=True, max_length=36, null=True, verbose_name='ctcl uuid')),
                ('status', models.TextField(blank=True, default='', null=True, verbose_name='batch row action measure status')),
            ],
        ),
        migrations.CreateModel(
            name='BatchRowActionOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_set_id', models.PositiveIntegerField(null=True, verbose_name='unique id of batch set')),
                ('batch_header_id', models.PositiveIntegerField(db_index=True, verbose_name='unique id of header row')),
                ('batch_row_id', models.PositiveIntegerField(db_index=True, verbose_name='unique id of batch row')),
                ('kind_of_action', models.CharField(choices=[('IMPORT_TO_BE_DETERMINED', 'To Be Determined'), ('DO_NOT_PROCESS', 'Do not process'), ('IMPORT_CREATE', 'Create'), ('IMPORT_ADD_TO_EXISTING', 'Add to Existing')], db_index=True, default='IMPORT_TO_BE_DETERMINED', max_length=40)),
                ('organization_we_vote_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='we vote permanent id')),
                ('organization_name', models.CharField(max_length=255, verbose_name='organization name')),
                ('organization_website', models.URLField(blank=True, max_length=255, null=True, verbose_name='url of the endorsing organization')),
                ('organization_email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='organization contact email address')),
                ('organization_contact_form_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='url of the organization contact form')),
                ('organization_contact_name', models.CharField(max_length=255, null=True)),
                ('organization_facebook', models.URLField(blank=True, null=True, verbose_name='url of facebook page')),
                ('organization_image', models.CharField(max_length=255, null=True, verbose_name='organization image')),
                ('state_served_code', models.CharField(blank=True, max_length=2, null=True, verbose_name='state this organization serves')),
                ('vote_smart_id', models.BigIntegerField(blank=True, null=True, verbose_name='vote smart special interest group id')),
                ('organization_description', models.TextField(blank=True, null=True, verbose_name='Text description of this organization.')),
                ('organization_address', models.CharField(blank=True, max_length=255, null=True, verbose_name='organization street address')),
                ('organization_city', models.CharField(blank=True, max_length=255, null=True)),
                ('organization_state', models.CharField(blank=True, max_length=2, null=True)),
                ('organization_zip', models.CharField(blank=True, max_length=255, null=True)),
                ('organization_phone1', models.CharField(blank=True, max_length=255, null=True)),
                ('organization_phone2', models.CharField(blank=True, max_length=255, null=True)),
                ('organization_fax', models.CharField(blank=True, max_length=255, null=True)),
                ('facebook_id', models.BigIntegerField(blank=True, null=True, verbose_name='facebook big integer id')),
                ('facebook_email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='facebook email address')),
                ('fb_username', models.CharField(max_length=50, null=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z]*$', message='Only alphanumeric characters are allowed.')])),
                ('facebook_profile_image_url_https', models.URLField(blank=True, null=True, verbose_name='url of image from facebook')),
                ('twitter_user_id', models.BigIntegerField(blank=True, null=True, verbose_name='twitter id')),
                ('organization_twitter_handle', models.CharField(max_length=255, null=True, verbose_name='organization twitter screen_name')),
                ('twitter_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='org name from twitter')),
                ('twitter_location', models.CharField(blank=True, max_length=255, null=True, verbose_name='org location from twitter')),
                ('twitter_followers_count', models.IntegerField(blank=True, default=0, verbose_name='number of twitter followers')),
                ('twitter_profile_image_url_https', models.URLField(blank=True, null=True, verbose_name='url of user logo from twitter')),
                ('twitter_profile_background_image_url_https', models.URLField(blank=True, null=True, verbose_name='tile-able background from twitter')),
                ('twitter_profile_banner_url_https', models.URLField(blank=True, null=True, verbose_name='profile banner image from twitter')),
                ('twitter_description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Text description of this organization from twitter.')),
                ('organization_instagram_handle', models.CharField(max_length=255, null=True, verbose_name='organization instagram screen_name')),
                ('wikipedia_page_id', models.BigIntegerField(blank=True, null=True, verbose_name='pageid')),
                ('wikipedia_page_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Page title on Wikipedia')),
                ('wikipedia_thumbnail_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='url of wikipedia logo thumbnail')),
                ('wikipedia_thumbnail_width', models.IntegerField(blank=True, null=True, verbose_name='width of photo')),
                ('wikipedia_thumbnail_height', models.IntegerField(blank=True, null=True, verbose_name='height of photo')),
                ('wikipedia_photo_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='url of wikipedia logo')),
                ('ballotpedia_page_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Page title on Ballotpedia')),
                ('ballotpedia_photo_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='url of ballotpedia logo')),
                ('organization_type', models.CharField(choices=[('C', 'Corporation'), ('G', 'Group'), ('I', 'Individual'), ('NW', 'News Corporation'), ('NP', 'Nonpartisan'), ('C3', 'Nonprofit 501c3'), ('C4', 'Nonprofit 501c4'), ('P', 'Political Action Committee'), ('PF', 'Public Figure'), ('TA', 'Trade Association or Union'), ('U', 'Unknown Type'), ('O', 'Group - Organization')], default='U', max_length=8, verbose_name='type of org')),
                ('status', models.TextField(blank=True, default='', null=True, verbose_name='batch row action organization status')),
            ],
        ),
        migrations.CreateModel(
            name='BatchRowActionPolitician',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_set_id', models.PositiveIntegerField(null=True, verbose_name='unique id of batch set')),
                ('batch_header_id', models.PositiveIntegerField(db_index=True, verbose_name='unique id of header row')),
                ('batch_row_id', models.PositiveIntegerField(db_index=True, verbose_name='unique id of batch row')),
                ('kind_of_action', models.CharField(choices=[('IMPORT_TO_BE_DETERMINED', 'To Be Determined'), ('DO_NOT_PROCESS', 'Do not process'), ('IMPORT_CREATE', 'Create'), ('IMPORT_ADD_TO_EXISTING', 'Add to Existing')], db_index=True, default='IMPORT_TO_BE_DETERMINED', max_length=40)),
                ('politician_we_vote_id', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='we vote permanent id of this politician')),
                ('first_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='first name')),
                ('middle_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='middle name')),
                ('last_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='last name')),
                ('politician_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='official full name')),
                ('google_civic_candidate_name', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='full name from google civic')),
                ('full_name_assembled', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='full name assembled from first_name + last_name')),
                ('gender', models.CharField(choices=[('F', 'Female'), ('N', 'Gender Neutral'), ('M', 'Male'), ('U', 'Unknown')], default='U', max_length=1, verbose_name='gender')),
                ('birth_date', models.DateField(blank=True, default=None, null=True, verbose_name='birth date')),
                ('bioguide_id', models.CharField(max_length=200, null=True, verbose_name='bioguide unique identifier')),
                ('thomas_id', models.CharField(max_length=200, null=True, verbose_name='thomas unique identifier')),
                ('lis_id', models.CharField(blank=True, max_length=200, null=True, verbose_name='lis unique identifier')),
                ('govtrack_id', models.CharField(max_length=200, null=True, verbose_name='govtrack unique identifier')),
                ('opensecrets_id', models.CharField(max_length=200, null=True, verbose_name='opensecrets unique identifier')),
                ('vote_smart_id', models.CharField(max_length=200, null=True, verbose_name='votesmart unique identifier')),
                ('fec_id', models.CharField(blank=True, max_length=200, null=True, verbose_name='fec unique identifier')),
                ('cspan_id', models.CharField(blank=True, max_length=200, null=True, verbose_name='cspan unique identifier')),
                ('wikipedia_id', models.CharField(blank=True, default=None, max_length=500, null=True, verbose_name='wikipedia url')),
                ('ballotpedia_id', models.CharField(blank=True, default=None, max_length=500, null=True, verbose_name='ballotpedia unique id')),
                ('house_history_id', models.CharField(blank=True, max_length=200, null=True, verbose_name='house history unique identifier')),
                ('maplight_id', models.CharField(blank=True, max_length=200, null=True, verbose_name='maplight unique identifier')),
                ('washington_post_id', models.CharField(max_length=200, null=True, verbose_name='washington post unique identifier')),
                ('icpsr_id', models.CharField(max_length=200, null=True, verbose_name='icpsr unique identifier')),
                ('political_party', models.CharField(max_length=255, null=True, verbose_name='politician political party')),
                ('state_code', models.CharField(max_length=2, null=True, verbose_name='politician home state')),
                ('politician_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='latest website url of politician')),
                ('politician_twitter_handle', models.CharField(max_length=255, null=True, verbose_name='politician twitter screen_name')),
                ('we_vote_hosted_profile_image_url_large', models.URLField(blank=True, max_length=255, null=True, verbose_name='we vote hosted large image url')),
                ('we_vote_hosted_profile_image_url_medium', models.URLField(blank=True, max_length=255, null=True, verbose_name='we vote hosted medium image url')),
                ('we_vote_hosted_profile_image_url_tiny', models.URLField(blank=True, max_length=255, null=True, verbose_name='we vote hosted tiny image url')),
                ('ctcl_uuid', models.CharField(blank=True, max_length=36, null=True, verbose_name='ctcl uuid')),
                ('politician_facebook_id', models.CharField(max_length=255, null=True, verbose_name='politician facebook user name')),
                ('politician_phone_number', models.CharField(max_length=255, null=True, verbose_name='politician phone number')),
                ('politician_googleplus_id', models.CharField(max_length=255, null=True, verbose_name='politician googleplus profile name')),
                ('politician_youtube_id', models.CharField(max_length=255, null=True, verbose_name='politician youtube profile name')),
                ('politician_email_address', models.CharField(max_length=80, null=True, verbose_name='politician email address')),
                ('status', models.TextField(blank=True, default='', null=True, verbose_name='batch row action politician status')),
            ],
        ),
        migrations.CreateModel(
            name='BatchRowActionPollingLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_set_id', models.PositiveIntegerField(null=True, verbose_name='unique id of batch set')),
                ('batch_header_id', models.PositiveIntegerField(db_index=True, verbose_name='unique id of header row')),
                ('batch_row_id', models.PositiveIntegerField(db_index=True, default=None, null=True, verbose_name='unique id of batch row')),
                ('kind_of_action', models.CharField(choices=[('IMPORT_TO_BE_DETERMINED', 'To Be Determined'), ('DO_NOT_PROCESS', 'Do not process'), ('IMPORT_CREATE', 'Create'), ('IMPORT_ADD_TO_EXISTING', 'Add to Existing')], db_index=True, default='IMPORT_TO_BE_DETERMINED', max_length=40)),
                ('polling_location_we_vote_id', models.CharField(default=None, max_length=255, null=True)),
                ('location_name', models.CharField(blank=True, max_length=255, null=True)),
                ('polling_hours_text', models.CharField(blank=True, max_length=255, null=True)),
                ('directions_text', models.TextField(blank=True, null=True)),
                ('latitude', models.FloatField(default=None, null=True)),
                ('longitude', models.FloatField(default=None, null=True)),
                ('line1', models.CharField(blank=True, max_length=255, null=True)),
                ('line2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
                ('source_code', models.CharField(blank=True, max_length=255, null=True)),
                ('state', models.CharField(blank=True, max_length=255, null=True)),
                ('county_name', models.CharField(default=None, max_length=255, null=True)),
                ('polling_location_deleted', models.BooleanField(default=False)),
                ('precinct_name', models.CharField(default=None, max_length=255, null=True)),
                ('use_for_bulk_retrieve', models.BooleanField(default=False)),
                ('zip_long', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BatchRowActionPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_set_id', models.PositiveIntegerField(null=True, verbose_name='unique id of batch set')),
                ('batch_header_id', models.PositiveIntegerField(db_index=True, verbose_name='unique id of header row')),
                ('batch_row_id', models.PositiveIntegerField(db_index=True, verbose_name='unique id of batch row')),
                ('kind_of_action', models.CharField(choices=[('IMPORT_TO_BE_DETERMINED', 'To Be Determined'), ('DO_NOT_PROCESS', 'Do not process'), ('IMPORT_CREATE', 'Create'), ('IMPORT_ADD_TO_EXISTING', 'Add to Existing')], db_index=True, default='IMPORT_TO_BE_DETERMINED', max_length=40)),
                ('position_we_vote_id', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='we vote permanent id')),
                ('ballot_item_display_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='text name for ballot item')),
                ('ballot_item_image_url_https', models.URLField(blank=True, max_length=255, null=True, verbose_name='url of https image for candidate, measure or office')),
                ('ballot_item_twitter_handle', models.CharField(max_length=255, null=True, verbose_name='twitter screen_name for candidate, measure, or office')),
                ('speaker_display_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='name of the org or person with position')),
                ('speaker_image_url_https', models.URLField(blank=True, max_length=255, null=True, verbose_name='url of https image for org or person with position')),
                ('speaker_twitter_handle', models.CharField(max_length=255, null=True, verbose_name='twitter screen_name for org or person with position')),
                ('date_entered', models.DateTimeField(auto_now=True, null=True, verbose_name='date entered')),
                ('date_last_changed', models.DateTimeField(auto_now=True, null=True, verbose_name='date last changed')),
                ('organization_id', models.BigIntegerField(blank=True, null=True)),
                ('organization_we_vote_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='we vote permanent id for the organization')),
                ('voter_id', models.BigIntegerField(blank=True, null=True)),
                ('voter_we_vote_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='we vote permanent id for the voter expressing the opinion')),
                ('public_figure_we_vote_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='public figure we vote id')),
                ('google_civic_election_id', models.CharField(db_index=True, default=0, max_length=255, null=True, verbose_name='google civic election id')),
                ('google_civic_election_id_new', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='google civic election id')),
                ('state_code', models.CharField(blank=True, max_length=2, null=True, verbose_name='us state of the ballot item position is for')),
                ('vote_smart_rating_id', models.BigIntegerField(blank=True, null=True)),
                ('vote_smart_time_span', models.CharField(blank=True, max_length=255, null=True, verbose_name='the period in which the organization stated this position')),
                ('vote_smart_rating', models.CharField(blank=True, max_length=255, null=True, verbose_name='vote smart value between 0-100')),
                ('vote_smart_rating_name', models.CharField(blank=True, max_length=255, null=True)),
                ('tweet_source_id', models.BigIntegerField(blank=True, null=True)),
                ('contest_office_id', models.BigIntegerField(blank=True, null=True, verbose_name='id of contest_office')),
                ('contest_office_we_vote_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='we vote permanent id for the contest_office')),
                ('contest_office_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='name of the office')),
                ('race_office_level', models.CharField(blank=True, max_length=255, null=True, verbose_name='race office level')),
                ('candidate_campaign_id', models.BigIntegerField(blank=True, null=True, verbose_name='id of candidate')),
                ('candidate_campaign_we_vote_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='we vote permanent id for the candidate')),
                ('google_civic_candidate_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='candidate name exactly as received from google civic')),
                ('google_civic_measure_title', models.CharField(blank=True, max_length=255, null=True, verbose_name='measure title exactly as received from google civic')),
                ('politician_id', models.BigIntegerField(blank=True, null=True, verbose_name='')),
                ('politician_we_vote_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='we vote permanent id for politician')),
                ('political_party', models.CharField(max_length=255, null=True, verbose_name='political party')),
                ('contest_measure_id', models.BigIntegerField(blank=True, null=True, verbose_name='id of contest_measure')),
                ('contest_measure_we_vote_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='we vote permanent id for the contest_measure')),
                ('stance', models.CharField(choices=[('SUPPORT', 'Supports'), ('STILL_DECIDING', 'Still deciding'), ('NO_STANCE', 'No stance'), ('INFO_ONLY', 'Information only'), ('OPPOSE', 'Opposes'), ('PERCENT_RATING', 'Percentage point rating')], default='NO_STANCE', max_length=15)),
                ('statement_text', models.TextField(blank=True, null=True)),
                ('statement_html', models.TextField(blank=True, null=True)),
                ('more_info_url', models.URLField(blank=True, max_length=255, null=True, verbose_name='url with more info about this position')),
                ('from_scraper', models.BooleanField(default=False)),
                ('organization_certified', models.BooleanField(default=False)),
                ('volunteer_certified', models.BooleanField(default=False)),
                ('status', models.TextField(blank=True, default='', null=True, verbose_name='batch row action position status')),
            ],
        ),
        migrations.CreateModel(
            name='BatchRowTranslationMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind_of_batch', models.CharField(choices=[('MEASURE', 'Measure'), ('ELECTED_OFFICE', 'ElectedOffice'), ('CONTEST_OFFICE', 'ContestOffice'), ('CANDIDATE', 'Candidate'), ('IMPORT_BALLOT_ITEM', 'Ballot Returned'), ('IMPORT_POLLING_LOCATION', 'Map Point'), ('ORGANIZATION', 'Organization'), ('POSITION', 'Position'), ('POLITICIAN', 'Politician')], default='MEASURE', max_length=32)),
                ('batch_row_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='name of the the row')),
                ('google_civic_election_id', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='google civic election id')),
                ('row_value_recognized_by_we_vote', models.TextField(blank=True, null=True)),
                ('incoming_alternate_row_value', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='BatchSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_civic_election_id', models.PositiveIntegerField(blank=True, db_index=True, default=0, null=True, verbose_name='google civic election id')),
                ('state_code', models.CharField(blank=True, db_index=True, max_length=2, null=True, verbose_name='state code for this data')),
                ('batch_set_name', models.CharField(max_length=255)),
                ('batch_set_description_text', models.CharField(max_length=255)),
                ('batch_set_source', models.CharField(max_length=255)),
                ('batch_process_id', models.PositiveIntegerField(blank=True, db_index=True, default=0, null=True)),
                ('batch_process_ballot_item_chunk_id', models.PositiveIntegerField(blank=True, db_index=True, default=0, null=True)),
                ('source_uri', models.URLField(blank=True, max_length=255, null=True, verbose_name='uri where data is coming from')),
                ('import_date', models.DateTimeField(auto_now=True, null=True, verbose_name='date when batch set was imported')),
            ],
        ),
    ]
